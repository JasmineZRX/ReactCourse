{"version":3,"sources":["index.js"],"names":["Parent","action","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Child","onAction","this","handleAction","React","Component","alertParent","_this","props","onClick","CountingParent","_this2","Object","_Users_dceddia_Business_Products_pure_react_examples_node_modules_react_scripts_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_super3","call","state","actionCount","bind","_Users_dceddia_Business_Products_pure_react_examples_node_modules_react_scripts_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","setState","CountingParentNoConstructor","_this3","Page","CountingParentWithReset","_this4","handleReset","ChildWithReset","_this5","onReset","ParentUsingChildWithReset","_this6","Demo","style","margin","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.c400a4d3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// First example: A simple Parent and Child, where the Parent\n// simply prints to the console when the button is clicked in Child\nclass Parent extends React.Component {\n  // Don't need to write this as an arrow function\n  // because it does not use \"this\". You're free to\n  // use the arrow syntax if you prefer, though.\n  handleAction(action) {\n    console.log('Child says', action);\n  }\n\n  render() {\n    return (\n      <Child onAction={this.handleAction}/>\n    );\n  }\n}\n\nclass Child extends React.Component {\n  // Written as an arrow function becuase it uses \"this\"\n  alertParent = () => {\n    this.props.onAction('button was clicked');\n  }\n\n  render() {\n    return (\n      <button onClick={this.alertParent}>Click Me</button>\n    );\n  }\n}\n\n// Second example: A Parent that counts the number of button clicks\n// Notice that it re-uses the same Child component above\nclass CountingParent extends React.Component {\n  // This is one way of initializing state\n  constructor(props) {\n    super(props);\n\n    // Set the state here. Use \"props\" if needed.\n    this.state = {\n      actionCount: 0\n    };\n\n    // Bind the event handler and replace the original\n    this.handleAction = this.handleAction.bind(this);\n  }\n\n  handleAction(action) {\n    console.log('Child says', action);\n    // Replace actionCount with an incremented value\n    this.setState({\n      actionCount: this.state.actionCount + 1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Child onAction={this.handleAction}/>\n        <p>Clicked {this.state.actionCount} times</p>\n      </div>\n    );\n  }\n}\n\n// Here's the same component, rewritten without a constructor\nclass CountingParentNoConstructor extends React.Component {\n  // initialize state with a property initializer\n  // you can access this.props if needed\n  state = {\n    actionCount: 0\n  };\n\n  // writing the handler as an arrow function\n  // means it will retain the proper value of\n  // `this`, so we can avoid having to bind it\n  handleAction = (action) => {\n    console.log('Child says', action);\n    // Replace actionCount with an incremented value\n    this.setState({\n      actionCount: this.state.actionCount + 1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Child onAction={this.handleAction}/>\n        <p>Clicked {this.state.actionCount} times</p>\n      </div>\n    );\n  }\n}\n\n// Third example: a Page containing a few CountingParents, to demonstrate that\n// state is independent for every component\nconst Page = () => (\n  <div>\n    <CountingParent/>\n    <CountingParentNoConstructor/>\n    <CountingParent/>\n  </div>\n);\n\n// This is an answer to the \"Reset Button\" mini-exercise\nclass CountingParentWithReset extends React.Component {\n  // This is a more succinct way of initializing state\n  // If I don't need to set up anything in the constructor,\n  // I prefer this way because it's shorter.\n  state = { actionCount: 0 }\n\n  handleAction = (action) => {\n    // Replace actionCount with an incremented value\n    this.setState({\n      actionCount: this.state.actionCount + 1\n    });\n  }\n\n  /* This function has been added */\n  handleReset = (action) => {\n    // Reset actionCount to 0\n    this.setState({\n      actionCount: 0\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Child onAction={this.handleAction}/>\n        <p>Clicked {this.state.actionCount} times</p>\n        {/* call handleReset when the button is clicked */}\n        <button onClick={this.handleReset}>Reset</button>\n      </div>\n    );\n  }\n}\n\n// Here's the 2nd part of that exercise, with the Child modified\n// to take an \"onReset\" prop and call it when the button is clicked\nclass ChildWithReset extends React.Component {\n  alertParent = () => {\n    this.props.onAction('button was clicked');\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.alertParent}>Click Me</button>\n        <button onClick={this.props.onReset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nclass ParentUsingChildWithReset extends React.Component {\n  // Initial state is set up here. You can refer to this.props\n  // here if you need to.\n  state = {\n    actionCount: 0\n  }\n\n  handleAction = (action) => {\n    // Replace actionCount with an incremented value\n    this.setState({\n      actionCount: this.state.actionCount + 1\n    });\n  }\n\n  /* This function has been added */\n  handleReset = (action) => {\n    // Reset actionCount to 0\n    this.setState({\n      actionCount: 0\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* call handleReset when the button is clicked */}\n        <ChildWithReset\n          onAction={this.handleAction}\n          onReset={this.handleReset}/>\n        <p>Clicked {this.state.actionCount} times</p>\n      </div>\n    );\n  }\n}\n\n\nconst Demo = () => (\n  <div>\n    <div>Example 1: Click the button and check the console</div>\n    <div style={{margin: 20}}>\n      <Parent/>\n    </div>\n\n    <div>Example 2: Click the button and watch the counter increment</div>\n    <div style={{margin: 20}}>\n      <CountingParent/>\n    </div>\n\n    <div>Example 3: Every instance of a component has its own independent state:</div>\n    <div style={{margin: 20}}>\n      <Page/>\n    </div>\n\n    <div>\"Reset Button\" Exercise:</div>\n    <div style={{margin: 20}}>\n      <CountingParentWithReset/>\n    </div>\n\n    <div>\"Reset Button\" Exercise Part 2:</div>\n    <div style={{margin: 20}}>\n      <ParentUsingChildWithReset/>\n    </div>\n  </div>\n)\n\nReactDOM.render(<Demo/>, document.querySelector('#root'));\n"],"sourceRoot":""}